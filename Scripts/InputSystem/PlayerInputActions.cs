//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/InputSystem/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Build"",
            ""id"": ""9639013b-bbcd-4a46-86a5-8467ad455eff"",
            ""actions"": [
                {
                    ""name"": ""Add"",
                    ""type"": ""Button"",
                    ""id"": ""13dde91a-14f7-44ee-9d06-ebb4093ae856"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Delete"",
                    ""type"": ""Button"",
                    ""id"": ""3b87fb68-b1eb-4bed-81cc-60bae08e54e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""f6c66ddb-f357-457b-945d-7fbbff599c3f"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""6609395c-9853-4a94-a469-a74f5f1264a2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TryRotate"",
                    ""type"": ""Button"",
                    ""id"": ""b69f5dde-71ee-4da4-af4e-f9378ac32345"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a46323fd-dcab-4004-8092-8560f6cf4ede"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Add"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5dc5759-f5e0-4338-9878-dd07b13e406c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delete"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""f999e252-2a83-4a9a-abfd-3b4d17e5156b"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""127212f6-5244-4aca-94a4-6d23063e58a5"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""89e45015-ec43-4a2a-bac4-07e2a0a15361"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""959de3b1-382a-44aa-bd66-f654a52a6af0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9d88fbf6-3d65-49cb-a7f4-1288553894b9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""2f3bad7d-e3bb-45c4-b63c-67b771f814ec"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""4257082a-77a6-4bfb-8f28-2e2d46bd3fcf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f232a230-40d2-48d6-a745-70fd8e2e049d"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4f2d5e0-e747-4f6a-81ee-f175cdc9a137"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TryRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Build
        m_Build = asset.FindActionMap("Build", throwIfNotFound: true);
        m_Build_Add = m_Build.FindAction("Add", throwIfNotFound: true);
        m_Build_Delete = m_Build.FindAction("Delete", throwIfNotFound: true);
        m_Build_Move = m_Build.FindAction("Move", throwIfNotFound: true);
        m_Build_Rotate = m_Build.FindAction("Rotate", throwIfNotFound: true);
        m_Build_TryRotate = m_Build.FindAction("TryRotate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Build
    private readonly InputActionMap m_Build;
    private IBuildActions m_BuildActionsCallbackInterface;
    private readonly InputAction m_Build_Add;
    private readonly InputAction m_Build_Delete;
    private readonly InputAction m_Build_Move;
    private readonly InputAction m_Build_Rotate;
    private readonly InputAction m_Build_TryRotate;
    public struct BuildActions
    {
        private @PlayerInputActions m_Wrapper;
        public BuildActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Add => m_Wrapper.m_Build_Add;
        public InputAction @Delete => m_Wrapper.m_Build_Delete;
        public InputAction @Move => m_Wrapper.m_Build_Move;
        public InputAction @Rotate => m_Wrapper.m_Build_Rotate;
        public InputAction @TryRotate => m_Wrapper.m_Build_TryRotate;
        public InputActionMap Get() { return m_Wrapper.m_Build; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BuildActions set) { return set.Get(); }
        public void SetCallbacks(IBuildActions instance)
        {
            if (m_Wrapper.m_BuildActionsCallbackInterface != null)
            {
                @Add.started -= m_Wrapper.m_BuildActionsCallbackInterface.OnAdd;
                @Add.performed -= m_Wrapper.m_BuildActionsCallbackInterface.OnAdd;
                @Add.canceled -= m_Wrapper.m_BuildActionsCallbackInterface.OnAdd;
                @Delete.started -= m_Wrapper.m_BuildActionsCallbackInterface.OnDelete;
                @Delete.performed -= m_Wrapper.m_BuildActionsCallbackInterface.OnDelete;
                @Delete.canceled -= m_Wrapper.m_BuildActionsCallbackInterface.OnDelete;
                @Move.started -= m_Wrapper.m_BuildActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_BuildActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_BuildActionsCallbackInterface.OnMove;
                @Rotate.started -= m_Wrapper.m_BuildActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_BuildActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_BuildActionsCallbackInterface.OnRotate;
                @TryRotate.started -= m_Wrapper.m_BuildActionsCallbackInterface.OnTryRotate;
                @TryRotate.performed -= m_Wrapper.m_BuildActionsCallbackInterface.OnTryRotate;
                @TryRotate.canceled -= m_Wrapper.m_BuildActionsCallbackInterface.OnTryRotate;
            }
            m_Wrapper.m_BuildActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Add.started += instance.OnAdd;
                @Add.performed += instance.OnAdd;
                @Add.canceled += instance.OnAdd;
                @Delete.started += instance.OnDelete;
                @Delete.performed += instance.OnDelete;
                @Delete.canceled += instance.OnDelete;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @TryRotate.started += instance.OnTryRotate;
                @TryRotate.performed += instance.OnTryRotate;
                @TryRotate.canceled += instance.OnTryRotate;
            }
        }
    }
    public BuildActions @Build => new BuildActions(this);
    public interface IBuildActions
    {
        void OnAdd(InputAction.CallbackContext context);
        void OnDelete(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnTryRotate(InputAction.CallbackContext context);
    }
}
